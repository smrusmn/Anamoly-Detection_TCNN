# -*- coding: utf-8 -*-
"""Training_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MfhtAMMm65_IIrd68iROzstaAshBX_ft
"""

!pip install darts
# !pip install optuna
# !pip install optuna-integration

import darts
from darts.models import TCNModel
from darts import TimeSeries
from darts.utils.likelihood_models import GaussianLikelihood
from darts.ad import (
    ForecastingAnomalyModel,
    KMeansScorer,
    NormScorer
)
from darts.ad.utils import (
    eval_metric_from_binary_prediction,
    eval_metric_from_scores,
    show_anomalies_from_scores,
)

from darts.metrics import mae, rmse
import matplotlib.pyplot as plt
import pandas as pd

train_df = pd.read_csv('X_train_split.csv')
val_df = pd.read_csv('X_val_split.csv')
test_df = pd.read_csv('X_test_normalized.csv')
print(train_df.shape, val_df.shape, test_df.shape)

train_df.head()

val_df.head()

train_series = TimeSeries.from_dataframe(train_df)
val_series = TimeSeries.from_dataframe(val_df)
test_series = TimeSeries.from_dataframe(test_df)

model = TCNModel(
    input_chunk_length=20,
    output_chunk_length=1,
    num_filters=16,    # Decreased number of filters
    num_layers=2,      # Decreased number of layers
    dropout=0.2,       # Added dropout
    random_state=42
)
model.fit(train_series, val_series=val_series, epochs=10, verbose=True)

model = TCNModel(
    input_chunk_length=20,
    output_chunk_length=1,
    num_filters=32,
    num_layers=1,
    dropout=0.3,
    random_state=42,
    optimizer_kwargs={'lr': 1e-4},
    batch_size=16,
    kernel_size=3,
    dilation_base=2,
    weight_norm=True
)
model.fit(train_series, val_series=val_series, epochs=50, verbose=True)

anomaly_model = ForecastingAnomalyModel(
    model=model,
    scorer=[
        NormScorer(ord=1)
    ],
)

START = 0.1
anomaly_model.fit(train_series, start=START, allow_model_training=False, verbose=True)

anomaly_scores, model_forecasting = anomaly_model.score(
    test_series, start=START, return_model_prediction=True, verbose=True
)
pred_start = model_forecasting.start_time()

print(
    "On testing set -> MAE: {}, RMSE: {}".format(
        mae(model_forecasting, test_series), rmse(model_forecasting, test_series)
    )
)